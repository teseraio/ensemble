syntax = "proto3";

package proto;

option go_package = "/operator/proto";

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service EnsembleService {
    rpc Apply(Component) returns (Component);

    rpc ListDeployments(google.protobuf.Empty) returns (ListDeploymentsResp);
    
    rpc GetDeployment(GetDeploymentReq) returns (Deployment);
}

message ListDeploymentsResp {
    repeated Deployment deployments = 1;
}

message GetDeploymentReq {
    string cluster = 1;
}

message ComponentTask {
    Component old = 1;
    Component new = 2;
}

// Component is like a snapshot or something. AKA Evaluation
message Component {
    // id of the component
    string id = 1;

    // name is the name of the component
    string name = 2;

    // spec of the stuff being applied
    google.protobuf.Any spec = 3;

    // generation of the component
    int64 sequence = 4;

    // status of the component
    Status status = 5;

    // Type of action
    Action action = 6;

    // timestamp
    google.protobuf.Timestamp Timestamp = 7;

    // metadata of the component
    map<string, string> metadata = 8;

    enum Status {
        UNKNOWN = 0;
        PENDING = 1;
        QUEUED = 2;
        FAILED = 3;
        APPLIED = 4;
        CANCELED = 5;
    }

    enum Action {
        NONE = 0;
        CREATE = 1;
        DELETE = 2;
    }
}

// Description of the cluster
message ClusterSpec {
    string name = 1;

    // name of the backend
    string backend = 2;

    // version of the backend (RESERVED)
    string version = 3;

    repeated Group groups = 4;

    message Group {
        string name = 1;
        int64 count = 2;
        string type = 3;
        map<string, string> config = 4;
        map<string, string> resources = 5;
    }

    int64 sequence = 5;
}

// Description of the resource
message ResourceSpec {
    // name of the cluster
    string cluster = 2;

    // name of the resource in the backend
    string resource = 3;

    // params are the params to configure the resource (in JSON)
    string params = 4;
}

// This is not important to keep on the Instance stored since we can rebuild this at any
// time because the function Initialize is deterministic??
// This represents all the things required to Create the resource
message NodeSpec {
    // PROVISIONAL
    string image = 30;
    string version = 31;

    map<string, string> env = 1;
    map<string, string> files = 2;
    repeated string cmd = 5;
}

/* Deployment describes the current state of the cluster */

message Deployment {
    string id = 1;

    repeated Instance instances = 2;

    map<string, GroupState> groups = 3;

    message GroupState {
        int64 desired = 1; // not necessary
        int64 update = 2;
    }

    string status = 4;

    int64 sequence = 5;

    string compID = 6;

    string backend = 7;
}

message InstanceUpdate {
    string ID = 1;

    string Cluster = 2;

    oneof event {
        Scheduled scheduled = 3;
        Running running = 4;
        Killing killing = 5;
        Failed failed = 6;
    }

    message Scheduled {
    }

    message Failed {
    }

    message Killing {
    }

    message Running {
        string ip = 1;
        string handler = 2;
    }
}

// Plan after a reconcile
message Plan {
    string evalID = 1;
    
    ClusterSpec cluster = 2;

    Deployment deployment = 3;

    repeated Instance nodeUpdate = 4;

    repeated Instance nodePlace = 5;
}

// represents a POD
message Instance {
    string ID = 1;
    
    string Name = 2;

    string Namespace = 4;
    
    string Cluster = 3;

    ClusterSpec.Group group = 5;

    map<string, string> KV = 10;

    NodeSpec spec = 11;

    Status status = 12;

    enum Status {
        OUT     = 0; // an old instance of the ensemble
        PENDING = 1; // pending on the Provider to be created
        
        SCHEDULED = 5; // the instance is being created
        RUNNING = 2; // the instance is running

        TAINTED = 8;
        FAILED  = 3; // the instance has stopped with a failure
        STOPPED = 4; // the instance is stopped
        // KILLING = 7; // the node is being removed
    }

    // string desired = 13;

    bool canary = 14;

    bool healthy = 15;

    int64 count = 22;

    string ip = 23;
    
    // previous instance if this is replacing another one
    string prev = 24;

    string handler = 25;
    
    int64 sequence = 26;

    Reschedule reschedule = 27;
    
    message Reschedule {
        int64 attempts = 3;
    }
}

/* Evaluation is used to trigger a new reconcile evaluation */

message Evaluation {
    // id of the evaluation
    string id = 1;

    Status status = 2;

    Trigger triggeredBy = 3;

    string clusterID = 4;

    enum Status {
        PENDING   = 0;
        COMPLETE  = 1;
        FAILED    = 2;
        CANCELLED = 3;
    }

    enum Trigger {
        UNKNOWN = 0;
        SPECCHANGE = 1;
        NODECHANGE = 2;
    }
}

message Event {
    string evalID = 1;

    string message = 2;

    map<string, string> details = 3;

    google.protobuf.Timestamp timestamp = 4;
}
