syntax = "proto3";

package proto;

option go_package = "/operator/proto";

import "google/protobuf/any.proto";
// import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service EnsembleService {
    rpc Apply(Component) returns (Component);
}

message ComponentTask {
    Component old = 1;
    Component new = 2;
}

// Component is like a snapshot or something. AKA Evaluation
message Component {
    // id of the component
    string id = 1;

    // name is the name of the component
    string name = 2;

    // spec of the stuff being applied
    google.protobuf.Any spec = 3;

    // generation of the component
    int64 sequence = 4;

    // status of the component
    Status status = 5;

    // Type of action
    Action action = 6;

    // timestamp
    google.protobuf.Timestamp Timestamp = 7;

    // metadata of the component
    map<string, string> metadata = 8;

    enum Status {
        UNKNOWN = 0;
        PENDING = 1;
        QUEUED = 2;
        FAILED = 3;
        APPLIED = 4;
        CANCELED = 5;
    }

    enum Action {
        NONE = 0;
        CREATE = 1;
        DELETE = 2;
    }
}

// Description of the cluster
message ClusterSpec {
    // name of the backend
    string backend = 2;

    // version of the backend (RESERVED)
    string version = 3;

    repeated Set sets = 4;

    message Set {
        string name = 1;
        int64 replicas = 2;
        string type = 3;
        map<string, string> config = 4;
        map<string, string> resources = 5;
    }
}

// Description of the resource
message ResourceSpec {
    // name of the cluster
    string cluster = 2;

    // name of the resource in the backend
    string resource = 3;

    // params are the params to configure the resource (in JSON)
    string params = 4;
}

message NodeUpdate {
    string id = 1;
    Node.NodeState state = 2;
}

message Node {
    string ID = 1;
    
    string Addr = 2;

    string Handle = 3;
    
    string Namespace = 4;
    
    string Nodeset = 5;
  
    string Nodetype = 6;

    NodeState State = 7;

    string Cluster = 8;

    NodeSpec Spec = 9;

    map<string, string> KV = 10;

    repeated Mount Mounts = 11;

    bool ready = 12;
    
    Resources resources = 13;
    
    enum NodeState {
        UNKNOWN = 0;
        INITIALIZED = 1;
        PENDING = 2;
        RUNNING = 3;
        TAINTED = 4;
        FAILED = 5;
        DOWN = 6;
    }

    message Resources {
        map<string, string> spec = 1;
    }

    message NodeSpec {
        map<string, string> env = 1;
        map<string, string> files = 2;
        string image = 3;
        string version = 4;
        repeated string cmd = 5;
    }
    
    message Mount {
        string id = 1;
        string name = 2;
        string path = 3;
    }
}

// Instance of a cluster
message Cluster {
    // name of the cluster
    string name = 1;

    string namespace = 2;

    string backend = 3;

    repeated Node nodes = 4;

    Status status = 5;
    
    enum Status {
        UNKNOWN = 0;
        SCALING = 1;
        COMPLETE = 2;
    }
}

message Context {
    Plan plan = 1;
    Plan.Set set = 2;
    Cluster cluster = 3;
}

message Plan {
    bool Bootstrap = 1;

    repeated Set sets = 2;

    message Set {
        string type = 1; // organized by type of cluster
        repeated Node AddNodes = 2;
        int64 DelNodesNum = 3;
        repeated string DelNodes = 4;
        repeated string UpdateNodes = 5;
    }
}

message Deployment {
    string id = 1;
    
    repeated Instance instances = 2;
}

message Instance {
    string nodeID = 1;
    
    int64 generation = 2;

    Status status = 3;

    enum Status {
        UNKNOWN = 0;
    }
}

message Evaluation {
    string id = 1;

    Status status = 2;

    Trigger triggeredBy = 3;

    string clusterID = 4;

    int64 generation = 5;

    enum Status {
        PENDING   = 0;
        COMPLETE  = 1;
        FAILED    = 2;
        CANCELLED = 3;
    }

    enum Trigger {
        UNKNOWN = 0;
        SPECCHANGE = 1;
    }
}

message Event {
    string evalID = 1;

    string message = 2;

    map<string, string> details = 3;

    google.protobuf.Timestamp timestamp = 4;
}
