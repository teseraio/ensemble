// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package clickhouse generated by go-bindata.// sources:
// resources/cluster.template
package clickhouse

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesClusterTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x55\xcb\x6e\x2b\x37\x0c\xdd\xfb\x2b\x54\xa3\xdb\x58\x9e\xe4\xe6\xd6\x0e\x14\xdd\x55\x81\x2e\xda\xa2\x68\x77\xdd\x08\xb2\x44\xdb\x82\x35\xe2\x54\xd2\x38\x4e\x8c\xfc\x7b\xa1\xd1\x3c\xfd\x08\xb2\x88\x49\x9e\x43\x8a\x94\x78\x86\xfd\x38\x95\x96\x1c\xc1\x07\x83\xee\x75\x5e\x2c\x96\xf3\x1f\x7c\xc6\x14\x96\x95\x74\xef\x7c\x46\x08\x21\xcc\xe2\x6e\x07\x3e\x1b\xd9\x01\x47\xb0\x5c\xc3\xa6\xde\x31\x9a\x8d\x21\xa8\xd0\x05\xb4\xc0\xa3\xaf\x81\xd1\xce\x1a\x91\x71\x47\x3c\x94\x78\x84\xd7\x79\xfe\x3f\xa7\xa3\x30\x78\x8f\xfe\x3e\x86\xd1\xee\x34\xd9\xfc\xaf\x06\xff\x2e\x2c\xee\x46\x29\xb4\x8c\x72\x23\x03\xf0\xf0\x1e\x22\x94\x8c\xf6\x8e\x01\x13\xe5\xc6\x02\xef\xd9\x8c\x66\x47\x5b\x63\x94\x35\x7b\x7e\x7a\x78\x20\xbf\x9b\x10\xc1\x91\x37\x63\xb5\x92\x5e\x13\xa9\xb5\x87\x10\x48\x44\x22\xad\xc5\x37\x22\x95\x82\x2a\x1a\xb7\x23\x0a\x9d\x03\x15\x0d\xba\x40\xb6\x1e\x4b\x82\x71\x0f\x3e\xb9\xa3\x34\x0e\x7c\x20\xd2\x69\xb2\xc7\x10\x89\x83\xf8\x86\xfe\xb0\x20\x0f\x0f\xdd\xb8\x9b\x3a\x22\x45\xf9\xcb\x0b\xa3\x63\xfb\x1a\xb1\x5c\x34\x7f\x5f\xc0\xa2\x7f\xe7\x45\x1f\x4f\x56\xdb\xd4\x3e\xc6\x4a\x54\xe8\x23\x5f\x15\x8f\x4f\x8c\x0e\x76\x8e\x47\xd5\x9a\xeb\xe5\x72\xc9\x68\x6f\xe6\xa8\x71\x11\x7c\x00\x7f\x04\x2f\x1a\x66\x53\xf9\x7c\x5e\xfc\x29\x4b\xf8\xfc\x64\xf4\x36\xe0\x0e\xb9\xab\xb3\xbe\xc1\xcb\x45\x33\xb1\x94\x27\x31\x9a\x2e\xff\xb6\x5c\x7f\x67\xf4\xd2\x9b\xb1\x07\x80\x4a\x48\x6b\x8e\x20\xa2\x29\x01\xeb\xc8\x9f\x18\xbd\xe1\x9d\xa4\x56\xb5\xf7\xe0\xa2\x48\x6f\xc0\x40\xe0\x45\xea\xfd\x4e\x2c\x13\x6b\x97\xf6\x25\xbd\x05\xd0\x42\x49\xb5\x07\x11\xcc\x07\xf0\xd5\xf3\x6a\xbd\x7e\xfa\xf6\xbc\x7e\x64\xf4\x1e\xa6\x2b\xed\x0f\x63\xef\xf3\xd3\xf7\xd5\x2f\xcb\x75\xf1\xd8\x94\x9e\xc6\x1a\xc6\xf0\x2a\x35\xaa\xba\x04\x17\x87\xf7\xa3\x4d\x48\x6f\x59\x34\x73\x74\xd2\x0a\xed\x42\x4e\x90\x9e\xc1\x17\xd1\x76\xc4\x95\x8c\x7b\x4e\x8f\xd2\x53\x6b\x36\x54\x59\xa3\x0e\x7b\xac\x03\x50\x46\x9b\x50\xfb\x38\xca\x4a\xdc\x45\xc6\xb2\xa2\x8c\xf6\x90\x76\x4c\x01\xbc\xd8\x1a\x0b\xe1\x3e\x71\xc0\x50\x46\x2f\x09\xb3\x21\x4f\x48\xb7\xb1\x35\x3b\xde\x18\x8b\x53\x69\x33\xbc\xf7\xb7\xa3\x80\xad\xac\x6d\x14\x95\xc7\x94\x87\xb7\x36\xa3\x97\x81\x29\xbc\xd7\x8b\x2b\xfc\x54\x49\x58\x7a\x40\x1f\xe8\x80\xff\x5a\x7b\xac\x80\xfe\x81\x41\xe1\x1b\xa3\xbd\xbf\xbd\x5e\x8b\xea\x20\xe0\x04\xaa\xce\x32\xb3\x95\x36\x00\xa3\x57\xfe\xd1\xdd\x26\xd9\x8b\x20\xf2\x1e\x84\x89\xbe\x36\xda\x2c\x94\xad\x43\x04\xcf\xcf\x67\xe2\xa5\xdb\x01\xf9\x39\xec\x93\x2c\xbd\xbc\x92\xc5\x3f\xe9\x57\x20\x9f\x9f\x3d\xad\xa1\x36\x80\x11\xc1\x44\x28\x13\x3e\x33\x17\x7f\x43\x65\x8d\x92\x57\xbc\xf6\x3c\x4d\x90\x5f\x45\xb2\x94\xe4\xdd\xcf\x29\x17\xbf\x25\x61\x4b\x12\x30\x6c\xfc\x15\xa3\x59\xea\x9e\xf1\x17\xfa\xcc\x18\x04\x66\x82\xa6\x5d\xf9\xf3\x99\x80\xd3\x57\x9d\xd1\xbe\xb5\x8b\x68\xfa\x02\x4d\xe7\x35\xeb\x12\x4e\xe7\x9b\xdd\x1f\x88\x49\x1f\x26\x5f\x3b\x87\x1a\x88\x71\x1a\x4e\xaf\xf3\x62\x3e\x3d\x5c\xd7\xf8\xe2\xdf\x8e\x78\xbb\xed\xdc\xee\x63\xb1\x2a\x2e\x5b\x64\x34\xe5\xef\x4e\x35\xaa\xdf\x29\x83\xf2\x38\xb9\xfe\xb6\x8d\x8b\xb6\x18\x9d\xf4\x37\xba\xee\x65\xd1\x4d\xa7\xad\xd1\xa5\xec\xd5\x22\x7a\xb3\xa9\x23\x68\xa1\xf5\xf8\x43\x9e\x97\x74\xbc\xd5\x32\x1c\x92\xf4\xd5\x40\xb5\xb6\x13\x35\xa0\x57\x69\xb2\x7f\x8b\xbe\x94\x51\x04\xb5\x87\x52\xde\x5f\xfb\x09\x2c\xad\xfe\x0d\xde\xac\xbf\x4a\xfe\x7f\x00\x00\x00\xff\xff\xba\xba\x98\xd4\xb6\x08\x00\x00")

func resourcesClusterTemplateBytes() ([]byte, error) {
	return bindataRead(
		_resourcesClusterTemplate,
		"resources/cluster.template",
	)
}

func resourcesClusterTemplate() (*asset, error) {
	bytes, err := resourcesClusterTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/cluster.template", size: 2230, mode: os.FileMode(436), modTime: time.Unix(1626185808, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/cluster.template": resourcesClusterTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"cluster.template": &bintree{resourcesClusterTemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
