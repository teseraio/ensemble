// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package clickhouse generated by go-bindata.// sources:
// resources/cluster.template
package clickhouse

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesClusterTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x55\xd1\x6e\xeb\x36\x0c\x7d\xcf\x57\x68\xc1\x5e\x1b\xc5\xed\xed\x5d\x52\xa8\xba\x4f\x03\xf6\xb0\x0d\xc3\xf6\x01\x82\x22\x31\x89\x10\x59\xf2\x28\x39\x4d\x1b\xe4\xdf\x07\x59\xb6\x63\xc7\xc9\xd0\x87\x86\xe4\x39\xa4\x48\xe9\xd0\xec\xc7\xa9\xb4\xe4\x08\x18\x8c\x77\xef\xf3\x62\xb1\x9c\xff\xe0\x33\xa6\x7c\x59\x49\xf7\xc9\x67\x84\x10\xc2\xac\xdf\xed\x00\xb3\x91\x1d\x70\x04\xcb\x35\x6c\xea\x1d\xa3\xd9\xb8\x06\x95\x77\xc1\x5b\xe0\x11\x6b\x60\xb4\xb3\x06\x64\xbf\x23\x08\xa5\x3f\xc2\xfb\x3c\xff\x9f\xd3\x41\x18\x10\x3d\x3e\xc6\x30\xda\x9d\x26\x9b\xff\xd6\x80\x9f\xc2\xfa\xdd\x20\x85\x96\x51\x6e\x64\x00\x1e\x3e\x43\x84\x92\xd1\xde\x71\xc5\x44\xb9\xb1\xc0\x7b\x36\xa3\xd9\xd1\xd6\x18\x64\xcd\x9e\x9f\x9e\x9e\xc8\xef\x26\x44\x70\xe4\xc3\x58\xad\x24\x6a\x22\xb5\x46\x08\x81\x44\x4f\xa4\xb5\xfe\x83\x48\xa5\xa0\x8a\xc6\xed\x88\xf2\xce\x81\x8a\xc6\xbb\x40\xb6\xe8\x4b\xe2\xe3\x1e\x30\xb9\xa3\x34\x0e\x30\x10\xe9\x34\xd9\xfb\x10\x89\x83\xf8\xe1\xf1\xb0\x20\x4f\x4f\xdd\xb8\x9b\x3a\x22\x45\xf9\xdb\x1b\xa3\x43\x7b\x8a\x58\x2e\x9a\xbf\xff\x81\x45\xfc\xe4\x45\x1f\x4f\x56\xdb\xd4\x3e\xc6\x4a\x54\x1e\x23\x5f\x15\xcf\x2f\x8c\x5e\xed\x1c\x8f\xaa\x35\xd7\xcb\xe5\x92\xd1\xde\xcc\x51\xe3\x22\x60\x00\x3c\x02\x8a\x86\xd9\x54\x3e\x9f\x17\x7f\xca\x12\x2e\x17\x46\xef\x03\x1e\x90\xbb\x3a\xeb\x3b\xbc\x5c\x34\x13\x4b\x79\x12\x83\xe9\xf2\x6f\xcb\xf5\x77\x46\x6f\xbd\x19\x7b\x00\xa8\x84\xb4\xe6\x08\x22\x9a\x12\x7c\x1d\xf9\x0b\xa3\x77\xbc\xa3\xd4\xaa\x46\x04\x17\x45\x7a\x03\x06\x02\x2f\x52\xef\x0f\x62\x99\x58\xbb\xa4\x97\xf4\x16\x40\x0b\x25\xd5\x1e\x44\x30\x5f\xc0\x57\xaf\xab\xf5\xfa\xe5\xdb\xeb\xfa\x99\xd1\x47\x98\xae\x34\x1e\x86\xde\xd7\x97\xef\xab\x5f\x96\xeb\xe2\xb9\x29\x3d\x8e\xb5\x83\xa8\x64\xdc\x73\x7a\x94\x48\xad\xd9\x50\x65\x8d\x3a\xec\x7d\x1d\x80\x32\xda\x84\xda\x2b\x2c\x2b\xf1\x10\x19\xcb\x8a\x32\xda\x43\xda\x66\x02\xa0\xd8\x1a\x0b\xe1\x31\xf1\x8a\xa1\x8c\xde\x12\x66\xd7\x3c\x21\xcd\x6c\x6b\x76\xbc\x31\x16\xa7\xd2\x66\x78\xef\xcf\x50\x0d\x5b\x59\xdb\x28\x2a\xf4\x29\x0f\x6f\x6d\x46\x6f\x03\x63\x78\xaf\xea\x09\x7e\xac\x77\x96\xae\xf9\xcb\x3b\xe0\xbf\xd6\xe8\x2b\xa0\x7f\xf8\xa0\xfc\x07\xa3\xbd\xbf\xbd\x04\xeb\xd5\x41\xc0\x09\x54\x9d\x97\xc1\x56\xda\x00\x8c\x4e\xfc\x0d\x3c\x73\xd2\x72\x8a\x20\xf2\x6b\x0d\xa3\x2d\xd8\x6c\x50\xa1\x6c\x1d\x22\x20\x3f\x9f\x09\x4a\xb7\x03\xf2\x73\xd8\xa7\xe5\xf1\xf6\x4e\x16\xff\xa4\x5f\x81\x5c\x2e\x3d\xad\xa1\x36\x80\x01\xc1\x44\x28\x13\x3e\x33\x17\x7f\x43\x65\x8d\x92\x13\x5e\x7b\x9e\x26\xc8\x27\x91\x2c\xf8\xac\xd0\x9c\x72\xf1\x5b\x5a\x3f\x49\xa8\x57\x5d\x4e\x18\x8d\xf4\x7a\xc6\x5f\x1e\x33\xe3\xba\x06\x46\x68\xda\x95\x3f\x9f\x09\x38\x3d\xe9\x8c\xf6\xad\xdd\x44\xd3\x77\x62\x3c\xaf\x59\x97\x70\x3c\xdf\xec\xfe\xf2\x3e\xa9\x78\xf4\x4d\x72\x5e\x03\x31\x4e\xc3\xe9\x7d\x5e\xcc\xc7\x87\xcb\x8d\xf7\xac\x7b\x1d\xe7\x4e\x9f\x8b\x55\x71\xdb\x1d\xa3\x29\x75\x77\xa0\x41\xe9\x4e\xba\x0a\xfd\xe8\xe6\xdb\x0e\x6e\x3a\x62\x74\xd4\xda\xe0\xa6\x97\x45\x37\x98\xb6\x46\x97\xb2\x7d\xee\x26\x44\x34\x9b\x3a\x82\x16\x5a\x0f\xbf\xb4\x59\x9f\x43\x41\xcb\x70\x48\xbb\xa9\x06\xaa\xb5\x1d\x2d\x02\x3a\x49\x93\xfd\x5b\x8f\xa5\x8c\x22\xa8\x3d\x94\xf2\xb1\xe2\x47\xb0\xa4\xfa\x3b\xbc\x59\x7f\x8b\xfc\xbf\x00\x00\x00\xff\xff\xd2\xa8\x01\x31\x57\x08\x00\x00")

func resourcesClusterTemplateBytes() ([]byte, error) {
	return bindataRead(
		_resourcesClusterTemplate,
		"resources/cluster.template",
	)
}

func resourcesClusterTemplate() (*asset, error) {
	bytes, err := resourcesClusterTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/cluster.template", size: 2135, mode: os.FileMode(436), modTime: time.Unix(1625085706, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/cluster.template": resourcesClusterTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"cluster.template": &bintree{resourcesClusterTemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
