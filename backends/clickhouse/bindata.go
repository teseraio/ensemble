// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package clickhouse generated by go-bindata.// sources:
// resources/cluster.template
package clickhouse

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesClusterTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x55\xcf\x6f\xeb\x36\x0c\xbe\xe7\xaf\xd0\x82\x5d\x6b\xc5\xed\xeb\x5b\x52\xa8\xea\x69\xc0\x0e\xdb\x30\x6c\xb7\x5d\x04\x45\x62\x12\x21\xb2\xe4\x51\x72\x9a\x36\xe8\xff\x3e\xc8\xb2\x1d\x3b\x3f\x1e\x7a\x68\x48\x7e\x1f\x29\x52\xfa\x68\xf6\x76\xac\x2c\x39\x00\x06\xe3\xdd\xeb\xbc\x2c\x16\xf3\x37\x3e\x63\xca\x57\xb5\x74\x1f\x7c\x46\x08\x21\xcc\xfa\xed\x16\x30\x1b\xd9\x01\x07\xb0\x5c\xc3\xba\xd9\x32\x9a\x8d\x73\x50\x79\x17\xbc\x05\x1e\xb1\x01\x46\x7b\x6b\x44\xf6\x5b\x82\x50\xf9\x03\xbc\xce\xf3\xff\x39\x1d\x85\x01\xd1\xe3\x7d\x0c\xa3\xfd\x69\xb2\xf9\x5f\x03\xf8\x21\xac\xdf\x8e\x52\x68\x19\xe5\x5a\x06\xe0\xe1\x23\x44\xa8\x18\x1d\x1c\x67\x4c\x94\x6b\x0b\x7c\x60\x33\x9a\x1d\x5d\x8d\x51\xd6\xec\xf9\xe9\xe1\x81\xfc\x6e\x42\x04\x47\xde\x8d\xd5\x4a\xa2\x26\x52\x6b\x84\x10\x48\xf4\x44\x5a\xeb\xdf\x89\x54\x0a\xea\x68\xdc\x96\x28\xef\x1c\xa8\x68\xbc\x0b\x64\x83\xbe\x22\x3e\xee\x00\x93\x3b\x4a\xe3\x00\x03\x91\x4e\x93\x9d\x0f\x91\x38\x88\xef\x1e\xf7\x05\x79\x78\xe8\xc7\xdd\xd6\x11\x29\xca\x5f\x5e\x18\x1d\xdb\xd7\x88\x45\xd1\xfe\xfd\x00\x16\xf1\x83\x97\x43\x3c\x59\x5d\x53\xbb\x18\x6b\x51\x7b\x8c\x7c\x59\x3e\x3e\x31\x7a\xb6\x73\x3c\xaa\xce\x5c\x2d\x16\x0b\x46\x07\x33\x47\x8d\x8b\x80\x01\xf0\x00\x28\x5a\x66\x5b\xf9\x74\x2a\xfe\x94\x15\x7c\x7d\x31\x7a\x1b\x70\x87\xdc\xd7\x59\xdd\xe0\xe5\xa2\x99\x58\xc9\xa3\x18\x4d\x97\x7f\x5b\xac\xbe\x33\x7a\xe9\xcd\xd8\x3d\x40\x2d\xa4\x35\x07\x10\xd1\x54\xe0\x9b\xc8\x9f\x18\xbd\xe1\x9d\xa4\x56\x0d\x22\xb8\x28\xd2\x1b\x30\x10\x78\x99\x7a\xbf\x13\xcb\xc4\xc6\x25\xbd\xa4\xb7\x00\x5a\x28\xa9\x76\x20\x82\xf9\x04\xbe\x7c\x5e\xae\x56\x4f\xdf\x9e\x57\x8f\x8c\xde\xc3\xf4\xa5\x71\x3f\xf6\x3e\x3f\x7d\x5f\xfe\xb2\x58\x95\x8f\x6d\xe9\x69\xac\x1b\x44\x2d\xe3\x8e\xd3\x83\x44\x6a\xcd\x9a\x2a\x6b\xd4\x7e\xe7\x9b\x00\x94\xd1\x36\xd4\x5d\x61\x55\x8b\xbb\xc8\x58\xd5\x94\xd1\x01\xd2\x35\x13\x00\xc5\xc6\x58\x08\xf7\x89\x67\x0c\x65\xf4\x92\x30\x3b\xe7\x09\x69\x66\x1b\xb3\xe5\xad\x51\x1c\x2b\x9b\xe1\x83\x3f\x43\x35\x6c\x64\x63\xa3\xa8\xd1\xa7\x3c\xbc\xb3\x19\xbd\x0c\x4c\xe1\x83\xaa\xaf\xf0\x53\xbd\xb3\x74\xcd\x9f\xde\x01\xff\xb5\x41\x5f\x03\xfd\xc3\x07\xe5\xdf\x19\x1d\xfc\xdd\x25\x58\xaf\xf6\x02\x8e\xa0\x9a\xbc\x0c\x36\xd2\x06\x60\xf4\xca\xdf\xc2\x33\x27\x2d\xa7\x08\x22\xbf\xd6\x30\xd9\x82\xed\x06\x15\xca\x36\x21\x02\xf2\xd3\x89\xa0\x74\x5b\x20\x3f\x87\x5d\x5a\x1e\x2f\xaf\xa4\xf8\x27\xfd\x0a\xe4\xeb\x6b\xa0\xb5\xd4\x16\x30\x22\x98\x08\x55\xc2\x67\x66\xf1\x37\xd4\xd6\x28\x79\xc5\xeb\xce\xd3\x06\xf9\x55\x24\x0b\x3e\x2b\x34\xa7\x2c\x7e\x4b\xeb\x27\x09\xf5\xac\xcb\x2b\x46\x2b\xbd\x81\xf1\x97\xc7\xcc\x38\xaf\x81\x09\x9a\xf6\xe5\x4f\x27\x02\x4e\x5f\x75\x46\x87\xd6\x2e\xa2\xe9\x3b\x31\x9d\xd7\xac\x4f\x38\x9d\x6f\x76\x7f\x7a\x9f\x54\x3c\xf9\x26\x39\xaf\x81\x18\xa7\xe1\xf8\x3a\x2f\xe7\xd3\xc3\xf5\x8d\x17\xff\xf6\xc4\xdb\x6d\xe7\x76\x1f\xcb\x65\x79\xd9\x22\xa3\x29\x7f\x7f\xaa\x51\xfd\x5e\xbf\x0a\xfd\xe4\xfa\xbb\x36\x2e\xda\x62\x74\xd2\xdf\xe8\xba\x17\x65\x3f\x9d\xae\x46\x9f\xb2\x7b\xf3\x26\x44\x34\xeb\x26\x82\x16\x5a\x8f\x3f\xb7\x59\xa4\x63\x55\xcb\xb0\x4f\x0b\xaa\x01\xaa\xb5\x9d\x6c\x03\x7a\x95\x26\xfb\x37\x1e\x2b\x19\x45\x50\x3b\xa8\xe4\x7d\xd9\x4f\x60\x49\xfa\x37\x78\xb3\xe1\x2a\xf9\xff\x01\x00\x00\xff\xff\x0d\x55\xc3\xcf\x5c\x08\x00\x00")

func resourcesClusterTemplateBytes() ([]byte, error) {
	return bindataRead(
		_resourcesClusterTemplate,
		"resources/cluster.template",
	)
}

func resourcesClusterTemplate() (*asset, error) {
	bytes, err := resourcesClusterTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/cluster.template", size: 2140, mode: os.FileMode(436), modTime: time.Unix(1627312510, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/cluster.template": resourcesClusterTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"cluster.template": &bintree{resourcesClusterTemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
