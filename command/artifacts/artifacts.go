// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package artifacts generated by go-bindata.// sources:
// ../charts/operator/.helmignore
// ../charts/operator/Chart.yaml
// ../charts/operator/crds/cluster.yaml
// ../charts/operator/crds/resource.yaml
// ../charts/operator/templates/_helpers.tpl
// ../charts/operator/templates/cluster-role-binding.yaml
// ../charts/operator/templates/cluster-role.yaml
// ../charts/operator/templates/deployment.yaml
// ../charts/operator/templates/service.yaml
// ../charts/operator/templates/serviceaccount.yaml
// ../charts/operator/values.yaml
package artifacts

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ChartsOperatorHelmignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\x41\x6e\xe3\x30\x0c\x45\xf7\x3c\xc5\x1f\x78\x33\x63\x0c\xe4\x43\x24\xb3\x98\x55\x0b\xa4\xc8\xb6\x90\x6d\x46\x62\x22\x8b\x82\x44\x27\x6d\x17\x3d\x7b\x91\x04\x41\xbb\x79\x20\x3f\xc8\x8f\xd7\xe1\xd9\x9b\x71\xcd\x0d\xa6\x90\x90\xb5\x32\x2e\x91\x33\xc6\x55\xd2\x2c\x39\xa0\xf8\xe9\xe4\x03\x37\x47\x1d\x5e\xa2\x34\xb4\xb5\x14\xad\xd6\xd0\x22\xa7\x84\x90\x74\xc4\xe2\x6d\x8a\x92\xc3\x5f\x54\x4e\xde\xe4\xcc\x28\xde\xe2\x8f\xdc\xe7\x99\x3a\x64\x0e\xde\x44\x33\x7e\x97\xca\x07\x79\xe3\x19\x17\xb1\x88\x5f\x7f\x1c\x9e\x72\x7a\x87\xe6\xdb\xe7\x55\x09\x85\x2b\x92\x64\x76\xe4\xb6\xbb\xd7\x9d\x69\x65\xea\xb0\xd1\x65\xd1\x8c\xfd\x66\x87\x59\x6a\x23\x17\xc4\x86\x1b\xef\xfa\xe4\xc6\x8f\x3a\xdc\xf8\x08\x62\x18\xae\x78\xac\xed\x9c\x87\xef\xa2\xd1\x4f\xa7\xb5\xe0\x20\x89\x1b\xf5\xae\x5d\x0a\xf5\x6e\xf4\x27\xea\x9d\x2d\xd7\x59\xab\x04\xea\x3f\xa9\xc3\xde\x57\xd1\xb5\xe1\xff\xf6\x5f\x23\x57\xaa\x1e\x79\x32\x72\x32\xb3\x1f\xee\xe7\x55\x8f\xe4\xce\x6d\xd2\x99\x07\xfa\x0a\x00\x00\xff\xff\x16\xec\x32\x27\x5d\x01\x00\x00")

func ChartsOperatorHelmignoreBytes() ([]byte, error) {
	return bindataRead(
		_ChartsOperatorHelmignore,
		"../charts/operator/.helmignore",
	)
}

func ChartsOperatorHelmignore() (*asset, error) {
	bytes, err := ChartsOperatorHelmignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../charts/operator/.helmignore", size: 349, mode: os.FileMode(436), modTime: time.Unix(1627669519, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ChartsOperatorChartYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xce\x4d\x6a\xc3\x30\x10\xc5\xf1\xbd\x4e\xf1\x2e\x10\xa7\x1f\x3b\x5d\xa1\x74\x57\xba\x1f\x4b\xcf\xb5\x40\x96\xc4\xcc\x38\x10\xe8\xe1\x8b\x53\x4c\xb6\xc3\xfb\x0f\x3f\x19\xe5\x9b\x6a\xa5\xb7\x88\xdb\x5b\x68\xb2\x31\x82\xcd\xb8\xcd\x95\x97\x3e\xa8\xe2\x5d\x43\xa6\x25\x2d\xc3\x1f\xbb\xdf\x00\x7c\xf6\xbc\x57\x51\x7c\xec\x33\xb5\xd1\x69\x38\xc7\xf0\x8e\x4d\x9a\xfc\x10\xbe\x12\xb5\x2c\x4c\xf7\x54\x89\xbe\x20\x8b\xcb\x2c\x46\x0b\x7e\x1f\x8c\x90\x31\x6a\x49\x72\xfc\x0d\xb7\xd3\xf1\x32\xbd\x4e\xef\x61\xed\x07\x65\x75\x1f\x16\xaf\xd7\x93\xd4\xcd\xa6\xd2\xc3\x26\xa5\xb9\x94\x46\xb5\x18\x80\x0b\xfe\xe1\x5f\x34\xaa\x04\x00\xd8\xb5\x3e\x6b\x7f\xdc\x8f\x30\x73\x28\x93\x38\x73\xc4\x22\xd5\xf8\x17\x00\x00\xff\xff\x59\x2e\xc7\xd8\x01\x01\x00\x00")

func ChartsOperatorChartYamlBytes() ([]byte, error) {
	return bindataRead(
		_ChartsOperatorChartYaml,
		"../charts/operator/Chart.yaml",
	)
}

func ChartsOperatorChartYaml() (*asset, error) {
	bytes, err := ChartsOperatorChartYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../charts/operator/Chart.yaml", size: 257, mode: os.FileMode(436), modTime: time.Unix(1627669574, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ChartsOperatorCrdsClusterYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\xaf\xd3\x30\x10\xbc\xe7\x57\xec\x1f\x48\xd1\x13\x17\x94\x1b\x02\x09\x71\x41\x4f\x20\xbd\xfb\x26\x1e\x82\x69\x62\x9b\x5d\xbb\xe2\x09\xf1\xdf\x91\xf3\xd1\x96\xd6\x6d\x10\xb0\xb7\x8c\xc7\x93\x99\xb5\xbd\x75\x5d\x57\x1c\xec\x13\x44\xad\x77\x0d\x71\xb0\xf8\x1e\xe1\xf2\x97\xee\xf6\xaf\x74\x67\xfd\x8b\xc3\x43\xb5\xb7\xce\x34\xf4\x26\x69\xf4\xe3\x47\xa8\x4f\xd2\xe1\x2d\x3e\x5b\x67\xa3\xf5\xae\x1a\x11\xd9\x70\xe4\xa6\x22\x72\x3c\xa2\xa1\x6e\x48\x1a\x21\xba\x83\x53\x8c\xed\x00\xaf\x59\xab\xd2\x80\x2e\xb3\x7a\xf1\x29\x34\x74\xb1\x4a\x74\x98\x9d\x68\xe6\xd4\x8b\xd6\xe1\xa1\x22\x22\x52\xc8\x01\xa6\xa1\x28\x09\x33\x10\xbd\x70\x8f\x73\xa4\xfb\x82\x71\x72\x91\xcb\x07\xb8\xd7\x8f\xef\x9f\x5e\x7e\xfa\x0d\x26\x8a\xcf\x01\x0d\xf9\xf6\x2b\xba\x78\x04\x83\xf8\x00\x89\x16\x7a\x22\x12\xad\x7e\x4f\x55\xdc\x7c\x5b\x20\x57\xcb\xdd\x1e\xce\x5c\xc2\x77\xb4\xee\xeb\xe5\x9a\x5a\x53\xc0\x57\x51\x8d\x62\x5d\x7f\x45\x10\x7c\x4b\x56\x50\xf0\x32\x77\xfb\x02\x9e\x8e\xa9\xf0\xff\xf9\x1f\x2c\xc2\xcf\x57\x6b\x36\x62\x2c\x5a\xbe\x9b\x76\x2b\xef\xbd\xc4\x1b\x99\x8f\x84\xbf\xdd\x2c\x08\x83\xed\xf8\x86\xaf\x55\xc0\xba\x88\x1e\x52\xe4\x04\x16\x2e\x37\x85\xb6\x1b\x93\x8b\x8d\x99\x9e\x1a\x0f\x8f\x1b\x6d\xfa\x83\x44\xb7\x2f\x41\xbe\x06\x6b\xda\x8b\x45\x83\x00\x67\xfe\xef\x5d\x28\x38\x2c\x7b\xab\xd7\x37\x74\xfe\x34\x23\xc7\xa4\xff\xfc\x38\x7d\x3b\x0f\x96\x77\x70\x10\xce\x3d\xbe\x15\xf1\xfc\x80\x35\xb5\xb2\xcc\xc1\xa3\xe2\x62\x88\x7e\xfc\xac\xf2\x28\xf2\x79\xcf\x07\x1e\xa1\x81\x3b\x98\x65\x34\x2e\xec\x30\x24\xe1\xe1\x34\x27\x67\x51\xeb\xfa\x34\xb0\x1c\xe1\x09\x5d\x66\xef\x8c\xfc\x0a\x00\x00\xff\xff\x00\x0a\x76\x39\xb1\x05\x00\x00")

func ChartsOperatorCrdsClusterYamlBytes() ([]byte, error) {
	return bindataRead(
		_ChartsOperatorCrdsClusterYaml,
		"../charts/operator/crds/cluster.yaml",
	)
}

func ChartsOperatorCrdsClusterYaml() (*asset, error) {
	bytes, err := ChartsOperatorCrdsClusterYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../charts/operator/crds/cluster.yaml", size: 1457, mode: os.FileMode(436), modTime: time.Unix(1627669519, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ChartsOperatorCrdsResourceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x53\xcb\x6a\xe4\x30\x10\xbc\xfb\x2b\xfa\x07\x3c\xcb\xb0\x97\x45\xb7\x65\x17\x96\xbd\x84\x21\x81\xb9\xb7\xed\x8a\xa3\x8c\x2d\x29\xdd\x92\x49\x08\xf9\xf7\xa0\xb1\x3d\x0f\x27\x33\x10\xd2\x37\x97\xaa\x5b\x55\xed\x52\x59\x96\x05\x07\xbb\x85\xa8\xf5\xce\x10\x07\x8b\xe7\x08\x97\xbf\x74\xb5\xfb\xa5\x2b\xeb\x7f\x0c\xeb\x62\x67\x5d\x63\xe8\x4f\xd2\xe8\xfb\x5b\xa8\x4f\x52\xe3\x2f\xee\xad\xb3\xd1\x7a\x57\xf4\x88\xdc\x70\x64\x53\x10\x39\xee\x61\x48\x26\x92\xae\xe0\x14\x7d\xd5\xc1\x6b\x1e\x56\x68\x40\x9d\x69\xad\xf8\x14\x0c\x2d\x4e\x89\x86\x51\x8a\x66\x4e\x39\x0d\x1b\xd6\x05\x11\x91\x42\x06\x34\x86\xa2\x24\x8c\x40\xf4\xc2\x2d\x4e\x91\xfa\x01\xfd\x5e\x46\x2e\x1f\xe0\x7e\x6f\xfe\x6f\x7f\xde\x9d\xc1\x44\xf1\x25\xc0\x90\xaf\x1e\x51\xc7\x03\x18\xc4\x07\x48\xb4\xd0\x23\x91\x68\xd6\x7b\xac\x4f\x9b\x2f\x0f\xc8\x55\x77\x49\x23\x64\x09\xcf\xb3\x34\x8a\x75\xed\xe2\x70\xde\xe0\x97\x9a\x02\x0b\xf7\x1f\xae\xbf\xa2\x39\x17\x37\xcd\xfe\x37\x72\xb7\xb9\xe8\xe0\xea\xbd\x82\xa7\x64\x05\xcd\x79\x53\x39\xdb\x5e\xa0\xb3\xb1\xd3\x25\x47\x8e\x49\xbf\xbd\x66\x5f\x8d\x11\xf9\x07\x07\xe1\x6c\xe9\xd2\x26\xac\x8b\x68\x27\x65\x9a\xaa\x43\x5a\x67\xfe\x24\x88\x5e\xdf\x8a\x1c\x2a\x9f\x7b\x6e\xb8\x87\x06\xae\xd1\x4c\x29\x9f\xd8\xa1\x4b\xc2\xdd\x49\xe4\xc7\xa9\xd6\xb5\xa9\x63\x31\xe7\x7e\xc7\x87\x34\x3f\xa1\xf7\x00\x00\x00\xff\xff\x47\x43\xc4\xb1\x7f\x03\x00\x00")

func ChartsOperatorCrdsResourceYamlBytes() ([]byte, error) {
	return bindataRead(
		_ChartsOperatorCrdsResourceYaml,
		"../charts/operator/crds/resource.yaml",
	)
}

func ChartsOperatorCrdsResourceYaml() (*asset, error) {
	bytes, err := ChartsOperatorCrdsResourceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../charts/operator/crds/resource.yaml", size: 895, mode: os.FileMode(436), modTime: time.Unix(1627669519, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ChartsOperatorTemplates_helpersTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\xcd\x6e\xdb\x3c\x10\xbc\xeb\x29\x16\xc2\x17\x20\xc9\x07\xd1\x87\x02\x3d\x04\xe8\x21\x48\x7b\x28\x5a\xb8\x45\x0d\xa4\xc7\x82\xa2\x56\x36\x11\x8a\x54\xf8\xe3\xc6\x50\xf4\xee\x85\x48\x5a\x96\x15\xc9\xb1\x6f\xb4\x38\x1c\xce\xcc\xee\xd2\x4d\xb3\xb8\x4d\xbe\xbc\xd4\x54\x16\x60\x37\x08\x92\x56\x08\xaa\xf4\x6b\xb6\xa1\xda\x92\xe4\x76\xd1\xb6\x49\xd3\x64\x50\x60\xc9\x25\x42\x8a\xd2\x60\x95\x0b\x24\x1d\x38\x85\xec\xb0\x4d\x9d\xb0\x40\x1e\xfc\xb9\x65\xc7\x44\x1e\xa9\x70\x68\x3c\xf2\xc7\x16\xb5\xe6\x05\xc2\x2b\x58\xed\x24\x83\x8f\x1f\xfc\x92\x57\x2b\x57\x96\xfc\x05\xd2\x2c\x85\xc8\x85\xb2\xe8\x96\x89\x97\xf7\xa0\x91\x5a\x04\xda\xdf\x50\x3a\x21\x76\xf0\xec\xa8\xe0\x25\xc7\x02\x68\x5d\x7b\xe1\x24\xf9\x8d\x81\xdb\xe3\x6d\x77\x43\x67\xc2\x40\x8e\x8c\x3a\x83\x60\x54\x85\xf0\xcd\xe5\xa8\x25\x5a\x34\xc1\x6e\xc9\x51\x14\x06\xa8\x46\x10\xbc\xe2\x16\x0b\xb0\x0a\xec\x86\x1b\xb8\xce\x77\x3e\x8a\xcf\xcb\x55\x87\xe5\x72\x0d\xa6\x46\x76\x43\x92\xaf\x25\x68\x14\x48\x4d\xcc\x8c\x29\x69\x29\x97\x26\xa4\x16\xbe\x71\x0b\x7f\xb9\x10\x90\x23\x38\xd3\xe9\x34\x40\xbd\xf8\xa8\x76\x3e\xd9\x0e\x74\x9c\x2e\x2f\xfb\x30\xf7\x9b\x7d\xa0\x11\x32\xbb\x7f\x4e\xe0\xc2\xf4\x3c\xff\x79\xf1\x77\x9f\xce\xaf\xe8\x41\x63\x1f\x43\x20\x21\xbf\x42\x46\xe1\xec\x5e\xe7\xd1\xc7\x0b\xc5\xd5\x9a\x4b\x5b\x42\x7a\x65\xb2\x2b\x93\x8e\xb8\xc2\xa5\xe7\xf7\xd7\xf4\xf2\xa8\xeb\x06\xe5\xec\x66\x64\x8b\xda\x70\x25\xbb\x52\xfa\x92\xc6\xfe\x08\x28\x41\x73\x14\xa7\xca\xea\x61\x87\x9a\x8e\xbd\x0c\x63\x0e\xeb\xc7\x78\xdd\x2b\x68\xac\x05\x65\x08\xe9\xff\x29\xa4\x7f\xd2\xcb\x87\x48\x55\x95\x92\x41\xa2\x39\x21\x31\x00\x82\xc6\x0d\x8a\x8a\x98\xcd\xc2\xcb\xbe\x83\xa6\x01\x2e\x99\x70\xc5\x84\x25\x12\x2e\x9d\x00\x18\x14\xc8\xac\xd2\xdf\x23\x31\x19\x74\x4b\x74\x79\x5f\xd7\x7b\xa3\x6d\x9b\xd0\xba\x26\x4f\xfd\x88\x12\xae\x16\x31\x74\xaf\xe0\xed\x91\x57\x78\x76\xca\xe2\xc8\xf5\x5b\x96\x8a\x4a\xba\xc6\x22\xcb\x77\x81\x68\xdf\x39\x2b\xd4\x5b\xce\xc6\xe7\x43\x6a\xab\x28\xfe\xfd\xdc\xc6\x36\xb3\x49\x0d\x5d\x1f\xcd\x04\x19\xc6\x9d\x4c\x6b\xe7\xd2\x58\x2a\x19\x1e\x2b\x1f\x0e\xd5\x54\xef\x8e\x1f\x74\x13\x9d\x52\xc6\x94\x93\xb6\x7b\xe5\x9c\xc1\x93\xa6\xfc\x81\xfb\x80\x5f\xce\x3d\x48\xc7\x30\xc2\xc2\xed\xa3\xbf\x85\xeb\xb7\x96\x0f\xaf\x1c\xb9\x99\x23\x93\x43\x8f\x83\x77\x60\x4f\x9b\xc6\x45\x7a\x16\xc1\xcc\xac\x87\x32\x43\xa1\xd8\x13\x6a\xe0\x15\x5d\x87\x69\xb7\x74\x7d\x22\x1d\x8f\x9b\x0c\xa4\xc0\x2d\xb4\x6d\xd3\x1c\xc0\xa9\xff\xdd\x5b\xe8\xaa\x18\xb1\x9e\x85\x68\xac\x95\xe1\x56\xe9\xdd\x1e\x38\x25\x75\x42\x84\xa5\xeb\x77\x24\x14\xb8\x9d\xb8\xfd\xf8\x7d\x09\xdb\x83\xe3\xb5\xc6\xf8\xf7\xd6\xb6\x59\xd3\x4c\x7d\x8e\xd2\x2e\x93\x5b\x3b\x21\x7e\x2a\xc1\xd9\x6e\x4e\x75\x10\xbd\xc4\x2d\xea\xf7\x42\x3b\x90\xcd\x86\xf6\x2f\x00\x00\xff\xff\xe1\xcc\x3e\x37\xe0\x08\x00\x00")

func ChartsOperatorTemplates_helpersTplBytes() ([]byte, error) {
	return bindataRead(
		_ChartsOperatorTemplates_helpersTpl,
		"../charts/operator/templates/_helpers.tpl",
	)
}

func ChartsOperatorTemplates_helpersTpl() (*asset, error) {
	bytes, err := ChartsOperatorTemplates_helpersTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../charts/operator/templates/_helpers.tpl", size: 2272, mode: os.FileMode(436), modTime: time.Unix(1627669665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ChartsOperatorTemplatesClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8e\x31\x4b\x04\x31\x10\x46\xfb\xfc\x8a\xe1\xfa\x8d\xd8\x49\x3a\xb5\xb0\xb3\x38\xc1\x7e\x36\xf9\x56\xc7\xcb\x4e\x42\x92\xb9\xc2\xe3\xfe\xbb\x1c\x0a\x22\xc2\xc2\xd5\x33\xef\xbd\x6f\x9a\x26\xc7\x55\x5e\xd1\xba\x14\x0d\xd4\x66\x8e\x9e\x6d\xbc\x97\x26\x9f\x3c\xa4\xa8\x3f\xdc\x75\x2f\xe5\xe6\x78\xeb\x0e\xa2\x29\xd0\x63\xb6\x3e\xd0\xf6\x25\xe3\x41\x34\x89\xbe\xb9\x15\x83\x13\x0f\x0e\x8e\x48\x79\x45\xa0\xd3\x89\x44\x63\xb6\x04\xda\x41\x3b\xd6\x39\xc3\x2f\x96\xf3\xe5\xbc\x23\x4f\xe7\xb3\x6b\x25\x63\x8f\xe5\x02\x71\x95\xa7\x56\xac\x6e\x0c\x70\x44\xff\xfa\x57\xe5\xba\xcd\x1f\x88\xa3\x07\x37\xfd\x98\x5e\xd0\x8e\x12\x71\x1f\x63\x31\x1d\xdb\xb2\xfe\xe7\xf7\xf9\x57\xfb\x4d\xf5\xca\x11\x81\x12\x16\xb6\x3c\xdc\x57\x00\x00\x00\xff\xff\x25\x9b\x7d\x29\x57\x01\x00\x00")

func ChartsOperatorTemplatesClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_ChartsOperatorTemplatesClusterRoleBindingYaml,
		"../charts/operator/templates/cluster-role-binding.yaml",
	)
}

func ChartsOperatorTemplatesClusterRoleBindingYaml() (*asset, error) {
	bytes, err := ChartsOperatorTemplatesClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../charts/operator/templates/cluster-role-binding.yaml", size: 343, mode: os.FileMode(436), modTime: time.Unix(1627669519, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ChartsOperatorTemplatesClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xbd\x6e\xc3\x30\x0c\x84\x77\x3d\x05\xe1\xc5\x40\x80\x38\xe8\x56\x78\xed\xd0\xbd\x43\x77\x46\x66\x52\x22\xb2\x28\x90\x92\x51\x34\xc8\xbb\x17\xae\x7f\xda\xd4\x4b\x36\x9e\x79\x77\x1f\x2d\x4c\xfc\x4e\x6a\x2c\xb1\x05\x3d\xa2\x6f\xb0\xe4\x0f\x51\xfe\xc2\xcc\x12\x9b\xcb\xb3\x35\x2c\x87\xe1\xc9\x5d\x38\x76\x2d\xbc\x84\x62\x99\xf4\x4d\x02\xb9\x9e\x32\x76\x98\xb1\x75\x00\x11\x7b\x6a\xe1\x7a\x05\x8e\x3e\x94\x8e\xa0\xa2\x68\xd4\x1f\x03\x35\xa7\x12\xc2\xb8\xae\xa0\x81\xdb\xcd\x69\x09\x64\xad\xdb\x03\x26\x7e\x55\x29\xc9\xc6\xfc\x1e\x16\xbf\xd8\x48\x74\x00\x4a\x26\x45\x3d\xcd\x7b\x3f\x91\xed\x4e\x1c\x2c\x63\x2e\xd3\xb7\xd5\x7f\xaf\x7e\x2d\x03\xe9\x71\x2e\xab\x76\xd5\xf6\x82\xba\xde\x52\x93\x74\xb6\x0e\x07\xfa\x24\xff\xa3\x8c\x74\xe0\x05\x45\xb1\x4b\xc2\x31\xcf\x6a\xa0\x65\xf4\x12\x4f\x7c\xee\x31\x3d\x42\x9f\x72\xf3\x83\x6f\x0f\x59\x6b\xff\xf4\xd4\xbb\xfa\xb1\xbf\x30\xf2\x4a\xff\xd3\x67\xca\xdf\x01\x00\x00\xff\xff\x17\xcd\x7f\x28\xfd\x01\x00\x00")

func ChartsOperatorTemplatesClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_ChartsOperatorTemplatesClusterRoleYaml,
		"../charts/operator/templates/cluster-role.yaml",
	)
}

func ChartsOperatorTemplatesClusterRoleYaml() (*asset, error) {
	bytes, err := ChartsOperatorTemplatesClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../charts/operator/templates/cluster-role.yaml", size: 509, mode: os.FileMode(436), modTime: time.Unix(1627669519, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ChartsOperatorTemplatesDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x5f\x6b\xdb\x30\x10\x7f\xcf\xa7\x10\x7e\x9e\x9d\x76\x8c\x32\xf4\x56\xd2\xc7\x6e\x0b\x74\x14\xc6\xd8\xc3\x45\xbe\x24\x62\x67\x49\x48\xe7\x6c\x21\xeb\x77\x1f\x8a\xe2\x58\x4e\xed\x0e\xda\xb5\x2f\xee\xdd\xfd\xfe\xdc\x9f\x0a\x9c\x7e\x44\x1f\xb4\x35\x52\x80\x73\x61\xbe\xbb\x9e\xfd\xd4\xa6\x96\xe2\x0e\x1d\xd9\x7d\x83\x86\x67\x0d\x32\xd4\xc0\x20\x67\x42\x18\x68\x50\x8a\xc3\x41\x68\xa3\xa8\xad\x51\x14\x68\x02\x36\x2b\xc2\x6a\xdd\x12\xc5\x74\x21\x2a\xf1\xf4\x34\x13\x82\x60\x85\x14\x22\x4a\x88\xc3\xa1\x1c\x81\xa4\x8a\x08\xf8\x23\x8c\x36\x35\x1a\x16\x1f\x22\x38\x38\x54\x11\xe8\xd1\x91\x56\x10\x8e\x92\xd5\x23\x50\x8b\xa1\x3a\x05\x17\xb6\x35\x9c\x94\x02\x12\x2a\xb6\x3e\x69\x35\xc0\x6a\x7b\x9f\x89\x4f\xc9\x77\xb0\xfb\x11\x1b\x37\x89\x99\xb1\x71\x04\x8c\x27\xe6\x6c\x12\x1d\xed\x2f\xcd\xdb\xb3\x35\x67\xeb\x5b\x63\x2c\x03\x6b\x6b\x42\xa2\x88\x3f\xd0\x07\x3b\x6c\x42\xb3\xfd\x06\x0d\x0d\x94\x3f\xf6\xb0\x58\x81\xa6\xee\x03\x34\xe8\xea\x35\x7d\x9d\xd9\xbb\x11\x8f\xf6\xa1\x1b\xd8\xe0\xb2\x25\x7a\x40\xe5\x91\xb3\x4e\x2e\x33\x6f\x6a\x27\xa0\xdf\x69\x85\xb7\x4a\xc5\x5d\x7e\x9e\xbe\xad\xe7\x85\xe7\x2b\x4b\x3c\xaa\xf5\x9a\xf7\x0b\x6b\x18\x7f\xf3\xb8\xa7\x7e\x45\x0f\xc3\xf2\x71\xb3\xca\x1a\x06\x6d\xd0\x67\x2d\x96\xfd\xfd\x57\x8b\x2d\x78\xae\xa2\x95\x1e\xf3\xa2\x97\x09\x3f\x61\xd2\xcc\xf5\xfb\x21\xf3\x71\xf4\x52\x14\xa3\x13\x3a\x26\xd3\x50\xe4\x68\x01\xc3\x26\xa5\x8b\x4b\xca\xb8\xcd\xa5\x25\xad\xf6\x83\x7f\xb3\x63\xae\x72\xe7\xe4\xd0\x0c\xf8\x4d\x90\xe2\x7b\x11\x37\x83\xbe\x78\x27\x8a\xb2\x5c\x59\xe2\x7a\x15\xbf\xe7\x6d\xf0\x73\xb2\x0a\x68\xde\x19\x98\x07\x06\xc6\x2a\xe5\xcb\x92\xec\xa6\x24\xdc\x21\xc5\x3f\xd9\x83\xc2\x13\x87\x36\x75\xfc\xba\xaa\x8e\xbf\xc5\x8f\x4c\xd3\x59\x9f\x1f\x5c\xbe\x91\x2d\xb3\x1b\x24\xb2\x05\x2e\xad\x67\x29\x6e\xae\xae\xae\x2f\x2a\x9c\xb7\x6c\x95\x25\x29\xbe\x2e\x96\x59\xce\x63\xb0\xad\x57\x18\xfe\xb9\xbc\x73\xe5\x0b\x6b\xdb\x59\x6a\x1b\xfc\x14\x0f\x77\xc2\xfc\x71\x32\x65\xaa\xbb\xb0\xd8\x44\xd8\x12\x78\x2b\x47\x87\x5a\x5c\x94\x7b\x84\xfa\x8b\xa1\xbd\x14\x6b\xa0\xd0\x91\x25\xe6\x91\x3b\x9e\x10\xc6\xc6\xf1\xfe\x4e\x7b\x29\x0e\x4f\x53\x2f\x84\xb1\x35\x3e\x9c\xde\x99\xbe\xdf\x3c\xfa\xa6\x97\xe1\x99\x1e\xac\xd7\xda\x68\xce\xae\xb0\x8b\xfc\x5f\x1d\xb6\x84\xfe\xf2\xf9\xce\x82\xaf\x54\xfb\x1b\x00\x00\xff\xff\xed\x0f\xe1\xd6\x69\x07\x00\x00")

func ChartsOperatorTemplatesDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_ChartsOperatorTemplatesDeploymentYaml,
		"../charts/operator/templates/deployment.yaml",
	)
}

func ChartsOperatorTemplatesDeploymentYaml() (*asset, error) {
	bytes, err := ChartsOperatorTemplatesDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../charts/operator/templates/deployment.yaml", size: 1897, mode: os.FileMode(436), modTime: time.Unix(1627669519, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ChartsOperatorTemplatesServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x31\x4f\xc3\x30\x14\x84\xf7\xfc\x8a\x53\xf7\x5a\x42\x62\xf2\xca\xca\x50\x09\xd4\xdd\x75\x0e\xb0\x78\xb1\x2d\xfb\xa5\x12\x0a\xfd\xef\xc8\xb5\xd9\x02\xd9\xf2\xee\xfb\x74\x3e\x97\xc3\x99\xa5\x86\x14\x2d\xae\x0f\xd3\x67\x88\xb3\xc5\x0b\xcb\x35\x78\x4e\x0b\xd5\xcd\x4e\x9d\x9d\x80\xe8\x16\x5a\x6c\x1b\x42\xf4\xb2\xce\xc4\x81\xb1\x72\xb9\x08\xcd\xdb\x2a\xd2\xe2\x03\x0c\x6e\xb7\x09\x10\x77\xa1\xd4\x66\x01\xdb\x76\xdc\x51\x3a\xd1\x84\x6f\xc4\x10\x67\x46\xc5\x63\x93\x6b\xa6\x6f\xa2\x7e\xe5\x5e\x67\xce\x4e\x56\x56\x53\xfb\x9b\x4c\x0b\x7a\x4b\x4e\x45\x47\xc9\xf1\xfe\xb3\xcb\xb7\xa0\xf3\xed\x53\x57\xde\xa9\xa7\x3b\xfc\xa1\x9a\xc7\x39\x97\xa4\xc9\x27\xb1\x78\x7d\x3a\x8d\x5b\x1f\x3c\xa0\x4a\xa1\xd7\x54\xfe\xdb\xf4\xcb\x3c\xff\xb5\xed\x27\x00\x00\xff\xff\x17\x17\x56\xfa\x6c\x01\x00\x00")

func ChartsOperatorTemplatesServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_ChartsOperatorTemplatesServiceYaml,
		"../charts/operator/templates/service.yaml",
	)
}

func ChartsOperatorTemplatesServiceYaml() (*asset, error) {
	bytes, err := ChartsOperatorTemplatesServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../charts/operator/templates/service.yaml", size: 364, mode: os.FileMode(436), modTime: time.Unix(1627669519, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ChartsOperatorTemplatesServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcf\x31\x4b\x04\x31\x10\x05\xe0\x3e\xbf\xe2\x71\xfd\x2d\x08\x56\xdb\xf9\x07\x6c\x84\x03\xcb\xb9\xe4\x89\x83\xc9\x44\x36\xb3\x67\xb1\xe6\xbf\x4b\xdc\xc2\x53\xb9\x2e\x09\xef\xcb\x9b\xd9\xb6\x23\xf4\x05\xd3\x49\xf2\xca\x36\x35\x2e\x17\x8d\x7c\x88\xb1\xae\xe6\x53\x5c\x28\x4e\x1c\x7b\x0f\xf2\xae\x27\x2e\x4d\xab\xcd\xb8\xdc\x85\x37\xb5\x34\xe3\xe9\x57\x3c\x14\xba\x24\x71\x99\x03\x60\x52\x38\x63\xdb\xa0\x16\xf3\x9a\x88\x03\xad\xb1\x9c\x33\xff\x94\x3c\x4a\xe1\x01\x13\x7a\x0f\x40\x96\x33\x73\x1b\x1e\xf8\x1e\xed\x1f\xde\x13\x03\x7c\xc2\xd4\x12\xcd\x71\xbf\xe3\x01\x3e\xd4\x5f\x6f\x6d\x23\x66\xd5\xc5\xb5\x5a\xdb\xc1\xd5\xc3\x4f\xa5\xd7\x67\x29\xf9\xd6\xff\xb4\x34\x2e\x57\xc7\xaf\x00\x00\x00\xff\xff\x83\xa2\x60\x92\x42\x01\x00\x00")

func ChartsOperatorTemplatesServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_ChartsOperatorTemplatesServiceaccountYaml,
		"../charts/operator/templates/serviceaccount.yaml",
	)
}

func ChartsOperatorTemplatesServiceaccountYaml() (*asset, error) {
	bytes, err := ChartsOperatorTemplatesServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../charts/operator/templates/serviceaccount.yaml", size: 322, mode: os.FileMode(436), modTime: time.Unix(1627669519, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ChartsOperatorValuesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\xc1\x6e\xdc\x36\x10\xbd\xf3\x2b\x1e\xe2\x43\x2e\xee\x76\xdd\x43\x0f\xba\x2d\x1c\xb4\x30\xd0\x24\x46\x9d\xa2\x28\x82\x1c\xb8\xd4\x93\xc5\x96\xe2\x08\x9c\xe1\xba\x42\xd1\x7f\x2f\x28\x6d\xd6\xb5\xdb\x93\x04\xf2\xcd\xe3\x9b\xf7\x66\xae\xf0\x8e\x83\xaf\xc9\x70\xf2\xa9\x52\x31\x48\x01\xb3\x72\x3a\x26\xee\xdc\x15\x3e\x8d\x51\x11\x15\x1e\xbf\x1d\xde\xff\xf4\xcd\x20\x65\xf2\x66\xec\x31\xc4\x0d\xf0\x8e\x21\xf9\x42\x9c\x7c\x89\xfe\x98\xa8\x30\xc1\x91\x98\xbd\x2a\x7b\xc4\x6c\x82\x45\x6a\x81\x71\x9a\x93\x37\xea\xce\xb9\xc2\x39\xc5\xe0\x6f\xa5\x66\xeb\x70\xe3\x5c\xcf\x53\x87\xc1\x27\xa5\x73\x73\x61\x61\xa2\x57\x76\xce\xc5\xc9\x3f\xb2\x03\x1c\x50\x38\x8b\x46\x93\xb2\x74\x30\x2a\x8b\x8f\xf2\xed\x57\xad\x0e\x98\x6b\x4a\xf7\x92\x62\x58\x3a\xdc\x0d\x1f\xc4\xee\x0b\x95\xd9\xce\x24\xf7\x35\xa5\x07\x86\x42\xd3\x0e\x9f\xbf\xb8\xec\x27\x7e\x3c\xb1\x94\xd8\xb3\xc3\x9b\x37\x6e\xa8\x29\xfd\xe7\xd0\x29\xcb\x29\x06\x1e\x42\x58\xc5\x3a\xe0\x0a\x0f\x33\x43\x1c\x22\x15\x4f\x23\x6d\x64\x81\xc7\x19\x07\xbf\x01\xa1\xa3\xd4\xd4\x37\x27\x42\xa1\x37\xf6\x0e\xe7\xbf\x0e\x56\x2a\x57\xa2\x43\xce\x62\xde\xa2\xe4\xd5\x36\xdf\xf7\xed\x63\x23\x5f\xd3\x39\xc0\x3f\x63\x3b\xfc\xf5\xf7\x5a\xff\x69\x24\x9a\x64\xc8\xf0\x7f\x55\x8d\xac\x2a\x77\x2b\xf6\x6e\x40\x16\x83\xd2\xe0\x73\x7f\xd6\xd2\xa2\x6d\x6a\xae\xe1\x37\xa2\xa8\x78\x64\x66\x69\x8a\x51\x35\xe6\xc7\x95\xf8\xab\x37\x97\x14\x1d\x56\xfc\xe6\xd1\x2c\xfd\xe1\x95\xba\x76\xf6\xc0\x50\x4b\xb4\xe5\x56\xb2\xf1\x4f\xbb\xa8\x1e\xf4\xc7\x22\x75\xee\xf0\xdd\x7e\xbf\x6f\x0e\xbf\x84\xad\x51\xfb\xfe\x63\x4e\xcb\xcf\x22\xf6\x43\x4c\xd4\x45\x8d\xd3\xc5\xb8\x52\xf3\x41\x3f\x48\x6e\xd7\x2f\x0f\x7f\x51\x96\x0e\x37\x67\xde\xd5\x8c\xc6\x67\xcb\xcc\x0e\xb7\xa9\xaa\xb1\xdc\xdd\xb7\x61\x91\x62\x1d\xbe\xdf\xef\x6f\xda\x34\xaa\xd4\x12\xf8\xec\xeb\xaf\x44\xd5\xea\x53\x5a\x50\x18\x64\x9a\x98\xfb\xd5\x3d\x13\xe8\x1a\xfe\x82\xfe\xbc\x38\x97\xea\xd5\x56\x13\x24\xfa\x13\x61\x6d\x71\x7c\x5b\x9c\x20\x59\x43\x94\xaa\x2b\x75\x18\xa5\x25\xd4\xf6\xac\x19\x5b\x95\x65\xb7\x6d\x99\x4f\x2a\x88\xb9\x05\xa3\x54\x84\xd1\xe7\xb0\x7d\x8b\x69\x6b\x0f\x92\xc1\x7c\x8a\x45\xf2\xc4\x6c\x8a\xa7\x68\x23\x52\x34\x4b\xdb\x38\x5d\xa4\x5c\x43\x6b\x18\xdb\xf3\xef\x63\x8e\x7f\xd4\x23\x77\x2d\xff\x45\x2a\x7a\xc1\x93\xcf\x2f\x3a\xf9\x57\x59\xcd\x5b\xb7\xb6\xa5\x2e\x29\xc9\x53\xcc\x8f\x2b\x7b\x8a\xb9\x41\x7c\xff\x7b\xd5\xf5\x7e\x6a\x0f\x64\x06\xaa\xfa\xb2\x5c\xaf\xfd\x17\x4e\xb2\x76\x4f\x84\x5a\xd2\x82\x63\xf1\xab\x37\x83\xb1\xe0\xed\xb3\xd5\x6f\x77\xce\x65\xe9\xf9\xc0\xc4\x60\x52\xb6\xa9\x31\x49\x6d\xf6\xb6\x31\xfa\xfc\xc5\x39\x3f\x0c\x31\x47\x5b\xd6\xeb\x7f\x02\x00\x00\xff\xff\x2b\xd3\xeb\x52\xae\x04\x00\x00")

func ChartsOperatorValuesYamlBytes() ([]byte, error) {
	return bindataRead(
		_ChartsOperatorValuesYaml,
		"../charts/operator/values.yaml",
	)
}

func ChartsOperatorValuesYaml() (*asset, error) {
	bytes, err := ChartsOperatorValuesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../charts/operator/values.yaml", size: 1198, mode: os.FileMode(436), modTime: time.Unix(1627669681, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../charts/operator/.helmignore":                         ChartsOperatorHelmignore,
	"../charts/operator/Chart.yaml":                          ChartsOperatorChartYaml,
	"../charts/operator/crds/cluster.yaml":                   ChartsOperatorCrdsClusterYaml,
	"../charts/operator/crds/resource.yaml":                  ChartsOperatorCrdsResourceYaml,
	"../charts/operator/templates/_helpers.tpl":              ChartsOperatorTemplates_helpersTpl,
	"../charts/operator/templates/cluster-role-binding.yaml": ChartsOperatorTemplatesClusterRoleBindingYaml,
	"../charts/operator/templates/cluster-role.yaml":         ChartsOperatorTemplatesClusterRoleYaml,
	"../charts/operator/templates/deployment.yaml":           ChartsOperatorTemplatesDeploymentYaml,
	"../charts/operator/templates/service.yaml":              ChartsOperatorTemplatesServiceYaml,
	"../charts/operator/templates/serviceaccount.yaml":       ChartsOperatorTemplatesServiceaccountYaml,
	"../charts/operator/values.yaml":                         ChartsOperatorValuesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"charts": &bintree{nil, map[string]*bintree{
			"operator": &bintree{nil, map[string]*bintree{
				".helmignore": &bintree{ChartsOperatorHelmignore, map[string]*bintree{}},
				"Chart.yaml":  &bintree{ChartsOperatorChartYaml, map[string]*bintree{}},
				"crds": &bintree{nil, map[string]*bintree{
					"cluster.yaml":  &bintree{ChartsOperatorCrdsClusterYaml, map[string]*bintree{}},
					"resource.yaml": &bintree{ChartsOperatorCrdsResourceYaml, map[string]*bintree{}},
				}},
				"templates": &bintree{nil, map[string]*bintree{
					"_helpers.tpl":              &bintree{ChartsOperatorTemplates_helpersTpl, map[string]*bintree{}},
					"cluster-role-binding.yaml": &bintree{ChartsOperatorTemplatesClusterRoleBindingYaml, map[string]*bintree{}},
					"cluster-role.yaml":         &bintree{ChartsOperatorTemplatesClusterRoleYaml, map[string]*bintree{}},
					"deployment.yaml":           &bintree{ChartsOperatorTemplatesDeploymentYaml, map[string]*bintree{}},
					"service.yaml":              &bintree{ChartsOperatorTemplatesServiceYaml, map[string]*bintree{}},
					"serviceaccount.yaml":       &bintree{ChartsOperatorTemplatesServiceaccountYaml, map[string]*bintree{}},
				}},
				"values.yaml": &bintree{ChartsOperatorValuesYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
